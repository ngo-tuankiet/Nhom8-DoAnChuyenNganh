import { defineNuxtModule, createResolver, addPluginTemplate, addTemplate, addImports } from '@nuxt/kit';
import { withHttps } from 'ufo';
import { defu } from 'defu';

const name = "@nuxtjs-alt/axios";
const version = "1.1.0";

const CONFIG_KEY = "axios";
const module = defineNuxtModule({
  meta: {
    name,
    version,
    configKey: CONFIG_KEY,
    compatibility: {
      nuxt: "^3.0.0"
    }
  },
  defaults: {},
  setup(opts, nuxt) {
    const moduleOptions = defu(nuxt.options.runtimeConfig?.public[CONFIG_KEY], opts);
    const defaultHost = moduleOptions.host || process.env.NITRO_HOST || process.env.HOST || "localhost";
    const defaultPort = moduleOptions.port || process.env.NITRO_PORT || process.env.PORT || 3e3;
    const prefix = process.env.API_PREFIX || moduleOptions.prefix || "/";
    const options = defu(moduleOptions, {
      baseURL: `http://${defaultHost}:${defaultPort}${prefix}`,
      browserBaseURL: void 0,
      credentials: false,
      debug: false,
      proxyHeaders: true,
      proxyHeadersIgnore: [
        "accept",
        "cf-connecting-ip",
        "cf-ray",
        "content-length",
        "content-md5",
        "content-type",
        "host",
        "if-modified-since",
        "if-none-match",
        "x-forwarded-host",
        "x-forwarded-port",
        "x-forwarded-proto"
      ],
      proxy: false,
      retry: false,
      https: false,
      headers: {
        common: {
          accept: "application/json, text/plain, */*"
        },
        delete: {},
        get: {},
        head: {},
        post: {},
        put: {},
        patch: {}
      },
      interceptorPlugin: false
    });
    if (typeof options.browserBaseURL === "undefined") {
      options.browserBaseURL = nuxt.options.app.baseURL;
    }
    if (options.retry === true) {
      options.retry = {};
    }
    if (options.https === true) {
      options.baseURL = withHttps(options.baseURL);
      options.browserBaseURL = withHttps(options.browserBaseURL);
    }
    const resolver = createResolver(import.meta.url);
    if (Object.hasOwn(nuxt.options, "proxy") && moduleOptions.interceptorPlugin) {
      addPluginTemplate({
        src: resolver.resolve("runtime/templates/interceptor.plugin.mjs"),
        filename: "axios-interceptor.plugin.mjs",
        options: nuxt.options.proxy
      });
    }
    addPluginTemplate({
      src: resolver.resolve("runtime/templates/axios.plugin.mjs"),
      options,
      filename: "axios.plugin.mjs"
    });
    addTemplate({
      getContents: () => axiosDefintiton(),
      filename: "axios.plugin.d.ts",
      write: true
    });
    const composables = resolver.resolve("runtime/composables");
    addImports([
      { from: composables, name: "useAxios" },
      { from: composables, name: "useLazyAxios" }
    ]);
  }
});
function axiosDefintiton() {
  return `import type { Plugin } from '#app'
import { NuxtAxiosInstance } from '@nuxtjs-alt/axios'

declare const _default: Plugin<{
    axios: NuxtAxiosInstance;
}>;

export default _default;
`;
}

export { module as default };
