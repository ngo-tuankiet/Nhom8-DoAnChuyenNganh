import { computed, isRef } from "vue";
import { useAsyncData, useNuxtApp } from "#imports";
import { hash } from "ohash";
export function useAxios(request, opts = {}) {
  if (!request) {
    throw new Error("[nuxt] [useAxios] request is missing.");
  }
  const key = opts.key || "$h" + hash([request, { ...opts, transform: null }]);
  const _request = computed(() => {
    let r = request;
    if (typeof r === "function") {
      r = r();
    }
    return isRef(r) ? r.value : r;
  });
  const {
    server,
    lazy,
    default: defaultFn,
    transform,
    pick,
    watch,
    initialCache,
    immediate,
    ...fetchOptions
  } = opts;
  const _fetchOptions = reactive({
    ...fetchOptions,
    cache: typeof opts.cache === "boolean" ? void 0 : opts.cache
  });
  const _asyncDataOptions = {
    server,
    lazy,
    default: defaultFn,
    transform,
    pick,
    initialCache,
    immediate,
    watch: [
      _fetchOptions,
      _request,
      ...watch || []
    ]
  };
  const { $axios } = useNuxtApp();
  const asyncData = useAsyncData(key, () => {
    return $axios.request(_request.value, _fetchOptions);
  }, _asyncDataOptions);
  return asyncData;
}
export function useLazyAxios(request, opts = {}) {
  return useAxios(request, {
    ...opts,
    lazy: true
  });
}
